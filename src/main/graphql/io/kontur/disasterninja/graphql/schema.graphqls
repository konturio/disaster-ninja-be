type Axis {
  label: String
  steps: [Step]
  datasetStats: DatasetStats
  quality: Float
  quotient: [String]
  quotients: [Quotient]
  transformation: Transformation
  transformations: [Transformation]
  parent: [String]
}

type AxisInfo {
  axis: [Axis]
}

type TransformationInfo {
  transformation: [Transformation]
}

type BivariateStatistic {
  axis: [Axis]
  meta: Meta
  initAxis: InitAxis
  overlays: [Overlay]
  indicators: [Indicator]
  correlationRates: [PolygonCorrelationRate]
  colors: Color
}

type Color {
  fallback: String
  combinations: [Combination]
}

type Combination {
  color: String
  corner: [String]
  color_comment: String
}

type CorrelationRate {
  x: Axis
  y: Axis
  rate: Float
  quality: Float
  correlation: Float
}

input FunctionArgs {
  id: String
  name: String
  x: String
  y: String
}

type FunctionResult {
  id: String
  result: Float
  unit: Unit
  x_label: String
  y_label: String
}

scalar GeoJSON

type Indicator {
  name: String
  label: String
  emoji: String
  maxZoom: Int
  copyrights: [String]
  direction: [[String]]
  unit: Unit
}

type InitAxis {
  x: Axis
  y: Axis
}

scalar Long

type Meta {
  max_zoom: Int
  min_zoom: Int
}

type OsmQuality {
  peopleWithoutOsmBuildings: Long
  areaWithoutOsmBuildingsKm2: Float
  peopleWithoutOsmRoads: Long
  areaWithoutOsmRoadsKm2: Float
  peopleWithoutOsmObjects: Long
  areaWithoutOsmObjectsKm2: Float
  osmGapsPercentage: Float
}

type Overlay {
  name: String
  description: String
  active: Boolean
  colors: [OverlayColor]
  x: Axis
  y: Axis
  order: Int
}

type OverlayColor {
  id: String
  color: String
}

type PolygonCorrelationRate {
  x: Axis
  y: Axis
  rate: Float
  quality: Float
  correlation: Float
  avgCorrelationX: Float
  avgCorrelationY: Float
}

type Analytics {
  population: Population
  humanitarianImpact: String
  osmQuality: OsmQuality
  thermalSpotStatistic: ThermalSpotStatistic
  urbanCore: UrbanCore
  functions(args: [FunctionArgs]): [FunctionResult]
  advancedAnalytics(args: [AdvancedAnalyticsRequest]): [AdvancedAnalytics]
}

input AdvancedAnalyticsRequest {
  numerator: String
  denominator: String
  calculations: [String]
}

type AdvancedAnalytics {
  numerator: String,
  denominator: String,
  numeratorLabel: String,
  denominatorLabel: String,
  analytics: [AdvancedAnalyticsValues]
}

type AdvancedAnalyticsValues {
  calculation: String,
  value: Float,
  quality: Float
}

type PolygonStatistic {
  bivariateStatistic: BivariateStatistic
  analytics: Analytics
}

input PolygonStatisticRequest {
  polygon: String
  polygonV2: GeoJSON
  xNumeratorList: [String]
  yNumeratorList: [String]
  importantLayers: [[String]]
}

type Population {
  population: Float
  urban: Float
  gdp: Float
}

type Statistic {
  axis: [Axis]
  meta: Meta
  initAxis: InitAxis
  overlays: [Overlay]
  indicators: [Indicator]
  correlationRates: [CorrelationRate]
  colors: Color
}

type Step {
  label: String
  value: Float
}

type ThermalSpotStatistic {
  industrialAreaKm2: Float
  hotspotDaysPerYearMax: Int
  volcanoesCount: Int
  forestAreaKm2: Float
}

type UrbanCore {
  urbanCorePopulation: Float
  urbanCoreAreaKm2: Float
  totalPopulatedAreaKm2: Float
}

type Query {
  allStatistic(defaultParam: Int): Statistic
  polygonStatistic(polygonStatisticRequest: PolygonStatisticRequest): PolygonStatistic
  getAxes: AxisInfo
  getTransformations(numerator: String, denominator: String): TransformationInfo
}

type Quotient {
  name: String
  label: String
  emoji: String
  maxZoom: Int
  description: String
  copyrights: [String]
  direction: [[String]]
  unit: Unit
}

type Unit {
  id: String
  shortName: String
  longName: String
}

type Transformation {
    transformation: String
    min: Float
    mean: Float
    skew: Float
    stddev: Float
    lowerBound: Float
    upperBound: Float
    points: [Float]
}

type DatasetStats {
    minValue: Float
    maxValue: Float
    mean: Float
    stddev: Float
}

schema {
  query: Query
}
